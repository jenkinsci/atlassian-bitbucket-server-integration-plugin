package com.atlassian.bitbucket.jenkins.internal.applink.oauth.provider;

import com.google.common.annotations.VisibleForTesting;

import javax.inject.Singleton;
import java.security.SecureRandom;
import java.util.Random;

/**
 * Implementation of {@link OAuthTokenVerifierGenerator} that uses a random-generated string value
 * <br>
 * This implementation is based on the
 * <a href="https://github.com/spring-projects/spring-security-oauth/blob/master/spring-security-oauth/src/main/java/org/springframework/security/oauth/provider/verifier/RandomValueVerifierServices.java">Spring OAuth Provider Library</a>
 */
@Singleton
public class RandomValueOAuthTokenVerifierGenerator implements OAuthTokenVerifierGenerator {

    @VisibleForTesting
    static final char[] DEFAULT_CODEC =
            "1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".toCharArray();
    @VisibleForTesting
    static final int VERIFIER_LENGTH_BYTES = 8;

    private final Random random = new SecureRandom();

    @Override
    public String generateVerifier() {
        byte[] verifierBytes = new byte[VERIFIER_LENGTH_BYTES];
        random.nextBytes(verifierBytes);
        // Convert the random-generated bytes to a verifier string by replacing them with characters in the ASCII
        // letters: 1-9, A-Z, a-z
        char[] chars = new char[verifierBytes.length];
        for (int i = 0; i < verifierBytes.length; i++) {
            chars[i] = DEFAULT_CODEC[(verifierBytes[i] & 0xFF) % DEFAULT_CODEC.length];
        }
        return new String(chars);
    }
}
